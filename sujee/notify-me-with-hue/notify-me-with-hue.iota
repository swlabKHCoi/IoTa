rules "Notify Me With Hue"
    device hues : [ capability.colorControl ];

    device motion : [ capability.motionSensor ];
    device contact : [ capability.contactSensor ];
    device acceleration : [ capability.accelerationSensor ];
    device mySwitch : [capability.switch ];
    device mySwitchOff : [ capability.switch ];
    device arrivalPresence : [ capability.presenceSensor ];
    device departurePresence : [ capability.presenceSensor ];
    device smoke : [ capability.smokeDetector ];
    device water : [ capability.waterSensor ];
    device button1 : [ capability.button ];
    input triggerModes : [ mode ];
    input timeOfDay : time;

    input color : enum = ["Red","Green","Blue","Yellow","Orange","Purple","Pink"];
    input lightLevel : enum = [[10:"10%"],[20:"20%"],[30:"30%"],[40:"40%"],[50:"50%"],[60:"60%"],[70:"70%"],[80:"80%"],[90:"90%"],[100:"100%"]];
    input duration : number;

    input frequency : decimal;

    rule "handle event when contact open"
        contact.contact[. ~> open];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contact[. ~> open];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contact[. ~> open];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contact[. ~> open];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contact[. ~> open];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contact[. ~> open];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when contact closed"
        contact.contactClosed[. ~> closed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contactClosed[. ~> closed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contactClosed[. ~> closed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contactClosed[. ~> closed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contactClosed[. ~> closed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        contact.contactClosed[. ~> closed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when contact active"
        acceleration.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        acceleration.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        acceleration.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        acceleration.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        acceleration.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        acceleration.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when mySwitch on"
        mySwitch.switch[. ~> on];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitch.switch[. ~> on];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitch.switch[. ~> on];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitch.switch[. ~> on];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitch.switch[. ~> on];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitch.switch[. ~> on];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when mySwitchOff off"
        mySwitchOff.switch[. ~> off];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitchOff.switch[. ~> off];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitchOff.switch[. ~> off];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitchOff.switch[. ~> off];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitchOff.switch[. ~> off];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        mySwitchOff.switch[. ~> off];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when motion active"
        motion.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        motion.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        motion.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        motion.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        motion.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        motion.active[. ~> active];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when arrivalPresence present"
        arrivalPresence.present[. ~> present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        arrivalPresence.present[. ~> present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        arrivalPresence.present[. ~> present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        arrivalPresence.present[. ~> present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        arrivalPresence.present[. ~> present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        arrivalPresence.present[. ~> present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when departurePresence not present"
        departurePresence.present[. ~> not present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        departurePresence.present[. ~> not present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        departurePresence.present[. ~> not present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        departurePresence.present[. ~> not present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        departurePresence.present[. ~> not present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        departurePresence.present[. ~> not present];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when smoke detected"
        smoke.detected[. ~> detected];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.detected[. ~> detected];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.detected[. ~> detected];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.detected[. ~> detected];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.detected[. ~> detected];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.detected[. ~> detected];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when smoke tested"
        smoke.smoke[. ~> tested];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.smoke[. ~> tested];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.smoke[. ~> tested];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.smoke[. ~> tested];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.smoke[. ~> tested];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        smoke.smoke[. ~> tested];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when water wet"
        water.water[. ~> wet];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        water.water[. ~> wet];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        water.water[. ~> wet];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        water.water[. ~> wet];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        water.water[. ~> wet];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        water.water[. ~> wet];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end

    rule "handle event when button pushed"
        button.button [. ~> pushed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Blue")
        state[evt.deviceId] = now( ),
        hueColor = 70,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        button.button [. ~> pushed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Green")
        state[evt.deviceId] = now( ),
        hueColor = 39,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        button.button [. ~> pushed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Yellow")
        state[evt.deviceId] = now( ),
        hueColor = 25,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        button.button [. ~> pushed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Orange")
        state[evt.deviceId] = now( ),
        hueColor = 10,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        button.button [. ~> pushed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Purple")
        state[evt.deviceId] = now( ),
        hueColor = 75,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );

        button.button [. ~> pushed];
        if(frequency && (state[evt.deviceId] == null || now() - state[evt.deviceId] >= frequency * 6000) && color == "Pink")
        state[evt.deviceId] = now( ),
        hueColor = 83,
        state.previous = [:],
        hues.each {
            state.previous[it.id] = [
                "switch": it.currentValue("switch"),
			    "level" : it.currentValue("level"),
			    "hue": it.currentValue("hue"),
			    "saturation": it.currentValue("saturation"),
			    "color": it.currentValue("color")
            ]
        },
        hues.setcolor([hue: hueColor, saturation: 100, level: (lightLevel as Integer) ?: 100]),
        setTimer( );
    end
end